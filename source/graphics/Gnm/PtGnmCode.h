#pragma once
#include <stdint.h>

#define PM4_HEADER_BUILD(lenDw, op, priv) (((uint32_t)(((((uint16_t)lenDw) << 16) + 0x3FFE0000) | 0xC0000000)) | ((uint8_t)(op)) << 8 | ((uint8_t)(priv)))
#define PM4_PRIV(token) ((uint8_t)(((uint32_t)(token)) & 0xFF))
#define PM4_TYPE(token) (((uint32_t)(token) >> 30) & 3)
#define PM4_LENGTH_DW(token) ((((uint32_t)(token) >> 16) & 0x3FFF) + 2)

// GNM Private Define
#define IT_GNM_PRIVATE 0x000000FF

enum IT_OpCodePriv : uint8_t
{
	OP_PRIV_INITIALIZE_DEFAULT_HARDWARE_STATE = 0x00,
	OP_PRIV_INITIALIZE_TO_DEFAULT_CONTEXT_STATE = 0x01,
	OP_PRIV_SET_EMBEDDED_VS_SHADER = 0x02,
	OP_PRIV_SET_EMBEDDED_PS_SHADER = 0x03,
	OP_PRIV_SET_VS_SHADER = 0x04,
	OP_PRIV_SET_PS_SHADER = 0x05,
	OP_PRIV_SET_ES_SHADER = 0x06,
	OP_PRIV_SET_GS_SHADER = 0x07,
	OP_PRIV_SET_HS_SHADER = 0x08,
	OP_PRIV_SET_LS_SHADER = 0x09,
	OP_PRIV_UPDATE_GS_SHADER = 0x0A,
	OP_PRIV_UPDATE_HS_SHADER = 0x0B,
	OP_PRIV_UPDATE_PS_SHADER = 0x0C,
	OP_PRIV_UPDATE_VS_SHADER = 0x0D,
	OP_PRIV_SET_VGT_CONTROL = 0x0E,
	OP_PRIV_RESET_VGT_CONTROL = 0x0F,
	OP_PRIV_DRAW_INDEX = 0x10,
	OP_PRIV_DRAW_INDEX_AUTO = 0x11,
	OP_PRIV_DRAW_INDEX_INDIRECT = 0x12,
	OP_PRIV_DRAW_INDEX_INDIRECT_COUNT_MULTI = 0x13,
	OP_PRIV_DRAW_INDEX_MULTI_INSTANCED = 0x14,
	OP_PRIV_DRAW_INDEX_OFFSET = 0x15,
	OP_PRIV_DRAW_INDIRECT = 0x16,
	OP_PRIV_DRAW_INDIRECT_COUNT_MULTI = 0x17,
	OP_PRIV_DRAW_OPAQUE_AUTO = 0x18,
	OP_PRIV_WAIT_UNTIL_SAFE_FOR_RENDERING = 0x19,
	OP_PRIV_PUSH_MARKER = 0x1A,
	OP_PRIV_PUSH_COLOR_MARKER = 0x1B,
	OP_PRIV_POP_MARKER = 0x1C,
	OP_PRIV_SET_MARKER = 0x1D,
	OP_PRIV_SET_CS_SHADER = 0x1E,
	OP_PRIV_DISPATCH_DIRECT = 0x1F,
	OP_PRIV_DISPATCH_INDIRECT = 0x20,
	OP_PRIV_COMPUTE_WAIT_ON_ADDRESS = 0x21,
};

